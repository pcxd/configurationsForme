"========================
"       Vim Basic
"========================
" set color scheme
colorscheme molokai

set history=700

set autoread
set nocompatible              " be iMproved, required
set number

syntax enable
syntax on

set t_Co=256
set smartcase

set smarttab
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

set ff=unix

filetype off                  " required
filetype indent on
filetype plugin on
filetype plugin indent on    " required

" code-fold setting
set foldenable
set foldmethod=manual
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

set foldmethod=marker
set foldmethod=syntax
set foldlevel=100       " Don't autofold anything
set foldopen-=search   " don't open folds when you search into them
set foldopen-=undo     " don't open folds when you undo stuff
"set foldcolumn=4

"Auto indent
set ai
"Smart indet
set si
"C-style indeting
set cindent
"Wrap lines
set wrap
" sign column on the left
set signcolumn=no
" set backspace
set backspace=indent,eol,start

autocmd BufEnter * :syntax sync fromstart

"Turn on WiLd menu
set wildmenu
"Always show current position
set ruler
"The commandbar is 2 high
set cmdheight=2
"Do not redraw, when running macros.. lazyredraw
set lz
"Bbackspace and cursor keys wrap to
set whichwrap+=<,>
"Include search
set incsearch
"Highlight search things
set hlsearch
"Set magic on
set magic
"No sound on errors.
set noerrorbells

"Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"Smart way to move btw. windows
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

"Tab configuration
nmap <C-n> :tabn<CR>
nmap <C-p> :tabp<CR>
"nmap <C-c> :tabc<CR>
"nmap <C-o> :tabo<CR>

"Turn backup off
set nobackup
set nowb
"
" multi-encoding setting
if has("multi_byte")
    set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,sjis,euc-kr,ucs-2le,latin1
    if v:lang =~ "^zh_CN"
        " Use cp936 to support GBK, euc-cn == gb2312
        set encoding=chinese
        set termencoding=chinese
        set fileencoding=chinese
    elseif v:lang =~ "^zh_TW"
        " cp950, big5 or euc-tw
        " Are they equal to each other?
        set encoding=taiwan
        set termencoding=taiwan
        set fileencoding=taiwan
    endif
    " Detect UTF-8 locale, and replace CJK setting if needed
    if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
        set encoding=utf-8
        set termencoding=utf-8
        set fileencoding=utf-8
    endif
endif

"Basically you press * or # to search for the current selection !! Really useful
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"
    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")
    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    else
        execute "normal /" . l:pattern . "^M"
    endif
    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")
   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif
   if bufnr("%") == l:currentBufNum
     new
   endif
   if buflisted(l:currentBufNum)
     execute("bdelete ".l:currentBufNum)
   endif
endfunction


"========================
"       VimPlugins
"========================
call plug#begin('~/.vim/plugged')
    " vim command tool
    Plug 'mhinz/vim-startify'
    Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!']  }
    " vim ctags
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'preservim/tagbar'
    Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
    " C/C++ code check
    " Plug 'dense-analysis/ale'
    " Plug 'Valloric/YouCompleteMe' 
    Plug 'octol/vim-cpp-enhanced-highlight'
    " vim and input tools
    Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension'}
    Plug 'jiangmiao/auto-pairs'
    Plug 'tpope/vim-surround'
    " vim display
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'luochen1990/rainbow'
    " GIT
    Plug 'tpope/vim-fugitive'
    if has('nvim') || has('patch-8.0.902')
        Plug 'mhinz/vim-signify', {'on': 'SignifyToggle'}
    else
        Plug 'mhinz/vim-signify', { 'branch': 'legacy', 'on' : 'SignifyToggle' }
    endif
call plug#end()


"=======================
"   ctags
"=======================
" TODO install universal-ctags and then correct ctags path
let CTAGS_PATH='/usr/local/bin/ctags'
set tags=./.tags;,.tags
"au BufWritePost *.c,*.cpp,*.h silent! !ctags  --recurse=yes --c++-kinds=+p --fields=+iaS --extra=+q .&
"set tags=tags;
"set autochdir


"=======================
"   Tagbar
"=======================
nmap <Leader>tb :TagbarToggle<CR>
nmap <F8> :TagbarToggle<CR>
let g:tagbar_ctags_bin=CTAGS_PATH
let g:tagbar_width=30
let g:tagbar_right=1


"=======================
"   cscope setting 
"=======================
if has("cscope")
    set csprg=/usr/local/bin/cscope
    set csto=1
    set cst
    set nocsverb
    "add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
endif
" set tags+=/Users/jansonpang/.vim/systags

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


"=======================
"   NERDTree setting 
"=======================
let NERDTreeWinPos='left'
let NERDTreeWinSize=30
nmap <silent> <leader>nt :NERDTreeToggle<cr>
"map <C-n> :NERDTreeToggle<CR>
"map <C-n>m :NERDTreeMirror<CR>
"let g:NERDTreeDirArrowExpandable = '▸'
"let g:NERDTreeDirArrowCollapsible = '▾'


"=======================
"   supertab setting 
"=======================
let g:SuperTabPluginLoaded=1 " Avoid load SuperTab Plugin
let g:SuperTabDefaultCompletionType='context'
let g:SuperTabContextDefaultCompletionType='<c-p>'


"=======================
"   bufexplorer setting 
"=======================
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
let g:bufExplorerMaxHeight=25        " Max height


"=======================
"   ShowMarks setting 
"=======================
let g:ycm_server_python_interpreter='/usr/bin/python'
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'


"=======================
"   signify setting 
"=======================
" default updatetime 4000ms is not good for async update
set updatetime=100
nmap <silent> <leader>sg :SignifyToggle<cr>
nmap <silent> <leader>sgd :SignifyDiff<cr>
"map <C-n> :SignifyToggle<CR>


"=======================
"   ALE setting 
"=======================
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

"=======================
"   gutentags setting 
"=======================
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.vim/cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.vim/cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.vim/cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif


"=======================
"   LeaderF setting 
"=======================
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
""let g:Lf_ShortcutF = "<silent> <leader>lff"
nmap <silent><leader>lf :Leaderf


"=======================
"   WhichKey setting 
"=======================
"nmap <silent> <leader>wk: WhichKey<cr>
"nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
"map <C-n> :WhichKey<CR>
set timeoutlen=500
"let g:mapleader = "\\"
"let g:maplocalleader = ","
"nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
"nnoremap <silent> <localleader> :WhichKey ','<CR>
"=======================
"   rainbow setting 
"=======================
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle"


"=======================
"   cpp-highlight setting 
"=======================
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
